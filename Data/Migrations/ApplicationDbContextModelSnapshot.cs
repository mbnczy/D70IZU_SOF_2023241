// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ShoeWebshop.Data;

#nullable disable

namespace ShoeWebshop.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.16");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            ConcurrencyStamp = "0679c138-0f3b-46c8-a81f-5c82baa8e0cb",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "2",
                            ConcurrencyStamp = "0b62bcbb-ca70-47ce-b43d-53e5fff68c25",
                            Name = "Staff",
                            NormalizedName = "STAFF"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ShoeWebshop.Models.Brand", b =>
                {
                    b.Property<string>("BrandID")
                        .HasColumnType("TEXT");

                    b.Property<string>("Country_of_origin")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Founded_year")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("BrandID");

                    b.ToTable("Brands");

                    b.HasData(
                        new
                        {
                            BrandID = "936c46b0-5ce0-4459-8166-3dbc16911496",
                            Country_of_origin = "Germany",
                            Founded_year = new DateTime(1949, 8, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Adidas"
                        },
                        new
                        {
                            BrandID = "e132653c-3c16-4526-8250-daeccf7fa460",
                            Country_of_origin = "USA",
                            Founded_year = new DateTime(1964, 1, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Nike"
                        });
                });

            modelBuilder.Entity("ShoeWebshop.Models.Category", b =>
                {
                    b.Property<string>("CategoryID")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("CategoryID");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryID = "ae24a4a9-86b2-4a79-8ca6-b50156258da5",
                            Description = "expensive",
                            Name = "Sneaker"
                        });
                });

            modelBuilder.Entity("ShoeWebshop.Models.Color", b =>
                {
                    b.Property<string>("ColorID")
                        .HasColumnType("TEXT");

                    b.Property<string>("ContentType1")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ContentType2")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ContentType3")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ContentType4")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Hexa_code")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("Image1")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<byte[]>("Image2")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<byte[]>("Image3")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<byte[]>("Image4")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ShoeID")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ColorID");

                    b.HasIndex("ShoeID");

                    b.ToTable("Colors");
                });

            modelBuilder.Entity("ShoeWebshop.Models.Purchase", b =>
                {
                    b.Property<string>("PurchaseID")
                        .HasColumnType("TEXT");

                    b.Property<string>("CustomerID")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Purchase_date")
                        .HasColumnType("TEXT");

                    b.Property<string>("Total_amount")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("PurchaseID");

                    b.HasIndex("CustomerID");

                    b.ToTable("Purchases");
                });

            modelBuilder.Entity("ShoeWebshop.Models.PurchaseItem", b =>
                {
                    b.Property<string>("PurchaseItemID")
                        .HasColumnType("TEXT");

                    b.Property<string>("PurchaseID")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<byte>("Quantity_purchased")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Specific_shoe_detailsID")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Sub_total")
                        .HasColumnType("INTEGER");

                    b.HasKey("PurchaseItemID");

                    b.HasIndex("PurchaseID");

                    b.HasIndex("Specific_shoe_detailsID");

                    b.ToTable("Purchase_items");
                });

            modelBuilder.Entity("ShoeWebshop.Models.Shoe", b =>
                {
                    b.Property<string>("ShoeID")
                        .HasColumnType("TEXT");

                    b.Property<string>("BrandID")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CategoryID")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Sex")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Weight")
                        .HasColumnType("INTEGER");

                    b.HasKey("ShoeID");

                    b.HasIndex("BrandID");

                    b.HasIndex("CategoryID");

                    b.ToTable("Shoes");
                });

            modelBuilder.Entity("ShoeWebshop.Models.Size", b =>
                {
                    b.Property<string>("SizeID")
                        .HasColumnType("TEXT");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("SizeID");

                    b.ToTable("Sizes");
                });

            modelBuilder.Entity("ShoeWebshop.Models.SpecificShoe", b =>
                {
                    b.Property<string>("SpecificShoeID")
                        .HasColumnType("TEXT");

                    b.Property<string>("ColorID")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<byte>("Discount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Order_type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Price")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Quantity_in_stock")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ShoeID")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SizesID")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("SpecificShoeID");

                    b.HasIndex("ColorID");

                    b.HasIndex("ShoeID");

                    b.HasIndex("SizesID");

                    b.ToTable("Specific_shoe_details");
                });

            modelBuilder.Entity("ShoeWebshop.Models.SiteUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created_at")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Updated_at")
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue("SiteUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ShoeWebshop.Models.Color", b =>
                {
                    b.HasOne("ShoeWebshop.Models.Shoe", "Shoe")
                        .WithMany()
                        .HasForeignKey("ShoeID")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Shoe");
                });

            modelBuilder.Entity("ShoeWebshop.Models.Purchase", b =>
                {
                    b.HasOne("ShoeWebshop.Models.SiteUser", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("ShoeWebshop.Models.PurchaseItem", b =>
                {
                    b.HasOne("ShoeWebshop.Models.Purchase", "Purchase")
                        .WithMany()
                        .HasForeignKey("PurchaseID")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("ShoeWebshop.Models.SpecificShoe", "Specific_shoe_details")
                        .WithMany()
                        .HasForeignKey("Specific_shoe_detailsID")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Purchase");

                    b.Navigation("Specific_shoe_details");
                });

            modelBuilder.Entity("ShoeWebshop.Models.Shoe", b =>
                {
                    b.HasOne("ShoeWebshop.Models.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandID")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("ShoeWebshop.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("ShoeWebshop.Models.SpecificShoe", b =>
                {
                    b.HasOne("ShoeWebshop.Models.Color", "Color")
                        .WithMany()
                        .HasForeignKey("ColorID")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("ShoeWebshop.Models.Shoe", "Shoe")
                        .WithMany()
                        .HasForeignKey("ShoeID")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("ShoeWebshop.Models.Size", "Size")
                        .WithMany()
                        .HasForeignKey("SizesID")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Color");

                    b.Navigation("Shoe");

                    b.Navigation("Size");
                });
#pragma warning restore 612, 618
        }
    }
}
