@model dynamic


<style>


    .card-img-top {
        transition: transform 0.3s ease; /* Kép méretváltozás átmenet */
    }

    .card:hover .card-img-top {
        transform: scale(1.1); /* Kicsit nagyítás a képen a hover állapotban */
    }
</style>

<nav class="navbar navbar-expand-sm navbar-toggleable-sm navbar-light bg-light border-bottom box-shadow mb-3">
    <div class="container">
        <button class="navbar-toggler" type="button" data-toggle="collapse" data-target=".navbar-collapse" aria-controls="navbarNav"
                aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="navbar-collapse collapse d-sm-inline-flex justify-content-between navbar-toggler-left">
            <ul class="navbar-nav flex-grow-1">
                <li class="nav-item">
                    <a class="nav-link btn btn-success" asp-area="" asp-controller="Home" asp-action="ProductManagement">Manage</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link btn btn-success" asp-area="" asp-controller="Products" asp-action="addshoe">Add New Shoe</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link btn btn-success" asp-area="" asp-controller="Products" asp-action="addbrand">Add New Brand</a>
                </li>
            </ul>
        </div>
    </div>
</nav>

@Html.ValidationSummary()

<h2 class="display-4 text-success">Add Shoes</h2>

<form id="ShoeUploadForm" method="post" enctype="multipart/form-data" class="photoForm">
    <div class="mb-3">
        <label for="brandSelect" class="form-label">Brand</label>
        <select name="shoe.BrandID" class="form-select" id="brandSelect">
            @foreach (var item in Model.Brands)
            {
                <option value="@item.BrandID">@item.Name</option>
            }
        </select>
    </div>

    <div class="mb-3">
        <label for="categorySelect" class="form-label">Category</label>
        <select name="shoe.CategoryID" class="form-select" id="categorySelect">
            @foreach (var item in Model.Categories)
            {
                <option value="@item.CategoryID">@item.Name</option>
            }
        </select>
    </div>

    <div class="mb-3">
        <label for="shoeName" class="form-label">Name</label>
        <input type="text" name="shoe.name" class="form-control" id="shoeName" minlenght="1"/>
    </div>

    <div class="mb-3">
        <label for="sexSelect" class="form-label">Sex</label>
        <select name="shoe.sex" class="form-select" id="sexSelect">
            <option value="Male">Male</option>
            <option value="Female">Female</option>
            <option value="Unisex" selected>Unisex</option>
            <option value="Kids">Kids</option>
        </select>
    </div>

    <div class="mb-3">
        <label for="shoeDescription" class="form-label">Description</label>
        <input type="text" name="shoe.description" class="form-control" id="shoeDescription" minlenght="10"/>
    </div>

    <div class="mb-3">
        <label for="shoeWeight" class="form-label">Weight</label>
        <input type="number" name="shoe.weight" class="form-control" id="shoeWeight" min="0"/>
    </div>

    <div class="mb-3">
        <div id="ColorContainer">
            <!-- Inputs generated by addColorInput() -->
        </div>
        <button type="button" class="btn btn-success" id="addColorInput">Add Color</button>
    </div>

    <button type="submit" class="btn btn-primary">Add</button>
</form>

<style>
    .card {
        border: 1px solid #28a745; /* Zöld szín */
        width: 250px;
        height: 300px;
        display: flex;
        flex-direction: column;
        overflow: hidden;
    }

        .card img {
            height: auto;
            width: 100%;
            overflow: hidden;
        }

    .text-success {
        color: #28a745; /* Zöld szín */
    }
</style>

<div class="row row-cols-1 row-cols-md-5 g-4">
    @{
        foreach (var item in Model.Shoes)
        {
            <div class="col">
                <div class="card" data-shoe-id="@item.ShoeID" onclick="getShoeId(this)">
                    <img src="@Url.Action("GetLogo","Products", new {id = item.BrandID})" class="card-img-top" alt="..."></img>
                    <div class="card-body">
                        <h4 class="card-title">@item.Brand.Name @item.Name</h4>
                        <h6 class="card-title">@item.Category.Name</h6>
                    </div>
                </div>
            </div>
        }
    }
</div>


<script>
     function getShoeId(card) {
        var shoeId = card.getAttribute("data-shoe-id");
        // Now you can use the shoeId as needed
        alert("Clicked Shoe ID: " + shoeId);
     }
    const ColorUploadForm = document.getElementById("ShoeUploadForm");
    const ColorInputsContainer = document.getElementById("ColorInputsContainer");
    const addColorInputButton = document.getElementById("addColorInput");

    let colorInputIndex = 0; // Initialize the index

    function addColorInput() {
        // Create a container div element
        var container = document.createElement("div");

        // Create and append the label for Color
        var colorLabel = document.createElement("label");
        colorLabel.textContent = "Color";
        container.appendChild(colorLabel);

        // Create and append the input for color name
        var colorNameInput = document.createElement("input");
        colorNameInput.setAttribute("type", "text");
        colorNameInput.setAttribute("name", `Colors[${colorInputIndex}].Name`);
        container.appendChild(colorNameInput);

        // Create and append the label for Hexa
        var hexaLabel = document.createElement("label");
        hexaLabel.textContent = "Hexa";
        container.appendChild(hexaLabel);

        // Create and append the input for hexa code
        var hexaCodeInput = document.createElement("input");
        hexaCodeInput.setAttribute("type", "color");
        hexaCodeInput.setAttribute("name", `Colors[${colorInputIndex}].Hexa_code`);
        container.appendChild(hexaCodeInput);

        // Create and append the input for file upload with multiple attribute
        var fileInput = document.createElement("input");
        fileInput.setAttribute("type", "file");
        fileInput.setAttribute("name", `Colors[${colorInputIndex}].PictureData`);
        fileInput.setAttribute("multiple", "multiple");
        container.appendChild(fileInput);

        // Get a reference to the element where you want to append the container
        var targetElement = document.getElementById("ColorContainer");

        // Append the container to the target element
        targetElement.appendChild(container);

        // Increment the index for the next color input
        colorInputIndex++;
    }

    addColorInputButton.addEventListener("click", addColorInput);
</script>


