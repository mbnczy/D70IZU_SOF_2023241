@model dynamic


<nav class="navbar navbar-expand-sm navbar-toggleable-sm navbar-light bg-light border-bottom box-shadow mb-3">
    <div class="container">
        <!-- Customize the content of your second navbar as needed -->
        <button class="navbar-toggler" type="button" data-toggle="collapse" data-target=".navbar-collapse" aria-controls="navbarNav"
                aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="navbar-collapse collapse d-sm-inline-flex justify-content-between navbar-toggler-left">
            <ul class="navbar-nav flex-grow-1">
                <li class="nav-item">
                    <a class="nav-link text-dark" asp-area="" asp-controller="Home" asp-action="ProductManagement">Manage</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link text-dark" asp-area="" asp-controller="Products" asp-action="addshoe">Add New Shoe</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link text-dark" asp-area="" asp-controller="Products" asp-action="addbrand">Add new Brand</a>
                </li>
                <!-- Add more items as needed -->
            </ul>
        </div>
    </div>
</nav>

<style>
    /* Add a CSS style to set a fixed height for the cards */
    .card {
        border: 1px solid black;
        width: 250px;
        height: 300px;
        display: flex;
        flex-direction: column;
        overflow: hidden;
    }

        /* Ensure images within cards scale proportionally and fit within the card height */
        .card img {
            height: auto;
            width: 100%;
            overflow: hidden;
        }
    .SpecificShoeForm{
        text-align:right;
    }
</style>

<h2>Stock:</h2>
<div class="SpecificShoeForm">
    <form id="SpecificShoeUploadForm" method="post" enctype="multipart/form-data" class="photoForm">
        <label id="shoeid" name="shoeid"></label>
        <label>Choose color</label>
        <select id="color-select" name="ColorID">
            <!-- Options will be populated dynamically -->
        </select>
        <label>Images:</label>
        <div class="row row-cols-1 row-cols-md-8 g-4" id="image-container">
            <!-- Images will be populated dynamically -->
        </div>
        <label>Order type</label>
        <select name="Order_type" >
            <option value="On Stock">On Stock</option>
            <option value="Out of Stock">Out of Stock</option>
            <option value="Available">Available</option>
            <option value="PreOrder">PreOrder</option>
        </select>
        <label>Quantity on stock:</label>
        <input type="number" name="quantity_in_stock" />
        <label>Price</label>
        <input type="number" name="price" />
        <label>Discount</label>
        <input type="number" name="discount" />
        <label>Size</label>
        <input type="number" name="size" />

        <input type="hidden" name="shoeid" id="shoeidinput" />
        <input type="hidden" name="colorid" id="colorid" />

        <input type="submit" value="Push" />
    </form>
</div>


<div class="row row-cols-1 row-cols-md-5 g-4">
    @{
        foreach (var item in Model.Shoes)
        {
            <div class="col">
                <div class="card" data-shoe-id="@item.ShoeID" onclick="populateColorSelect(this)">
                    <img src="@Url.Action("GetLogo","Products", new {id = item.BrandID})" class="card-img-top" alt="..."></img>
                    <div class="card-body">
                        <h4 class="card-title">@item.Brand.Name @item.Name</h4>
                        <h6 class="card-title">@item.Category.Name</h6>
                    </div>
                </div>
            </div>
        }
    }
</div>



<script>
    var colorSelect = document.getElementById("color-select");
    var div = document.getElementById("image-container");

    var input_shoeid = document.getElementById("shoeid")
    var input_colorid = document.getElementById("colorid")


    colorSelect.addEventListener("change", GetImagesFromColor);

    function GetImagesFromColor() {
        var selectedOptionId = colorSelect.value;
        console.log("Selected Option ID:", selectedOptionId);
        div.innerHTML = '';
        input_colorid = selectedOptionId;
        getImageCountAjax(selectedOptionId)
            .then(function (count) {
                let indexer = 1;
                console.log('Received Image Count:', count);
                while (indexer < count) {
                    var div_col = document.createElement('div');
                    div_col.className = "col";
                    var div_card = document.createElement('div');
                    div_col.className = "card";

                    var img = document.createElement('img');

                    var url = '@Url.Action("GetImage", "Home", new { id = "PLACEHOLDER_ID", index = "PLACEHOLDER_INDEX"})';
                    url = url.replace("PLACEHOLDER_ID", selectedOptionId)
                        .replace("PLACEHOLDER_INDEX", indexer.toString());
                    console.log(url);
                    img.src = url;
                    img.className = "card-img-top";


                    if (img.src != null) {
                        div_card.appendChild(img);
                        div_col.appendChild(div_card);
                        div.appendChild(div_col);
                    }
                    
                    indexer++;
                }
            });
    }

    function getImageCountAjax(colorid) {
        return new Promise(function (resolve, reject) {
            $.ajax({
                url: '/Home/GetImageCount/' + colorid,
                type: 'GET',
                dataType: 'json',
                success: function (count) {
                    resolve(count);
                },
                error: function (error) {
                    reject(error)
                }
            });
        });
    }
    async function getImageCountFetch(colorid) {
        const response = await fetch('/Home/GetImageCount/' + colorid)
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(data => {
                return data;
                //console.log('Image Count:', data);
            })
            .catch(error => {
                console.error('Fetch error:', error);
            });

        return await response;
    }


    function populateColorSelect(card) {
        var shoeId = card.getAttribute("data-shoe-id");
        var colorSelect = document.getElementById("color-select");
        //var images = document.getElementById("divimages");

        // Make an AJAX request to retrieve colors for the selected shoe ID
        $.ajax({
            url: '/Home/GetColorsById', // Replace with the actual URL of your controller action
            type: 'GET',
            data: { id: shoeId },
            dataType: 'json',
            success: function (colors) {
                // Clear existing options
                colorSelect.innerHTML = '';
                console.log(colors)

                // Populate the select options with colors
                colors.forEach(function (color) {
                    console.log(color)
                    var option = document.createElement('option');
                    option.value = color.colorID;
                    option.textContent = color.name;
                    colorSelect.appendChild(option);
                });

                document.getElementById("shoeidinput").value = shoeId;
                
                GetImagesFromColor();
            },
            error: function () {
                console.error('Failed to retrieve color options.');
            }
        });

    }
</script>